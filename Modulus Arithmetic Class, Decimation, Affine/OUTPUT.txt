----------------------------------------
Start of Modular Arithmetic Testing

1- Testing basics:
Object n is created using default constructor
print using __str__ = 0
print using n.print() = 0 mod 2
get_value() = 0
get_mod() = 2
n.set_value(6) = True
6
6 mod 2
n.set_mod(11) = True
6
6 mod 11
n.set_value("a") = False
0
0 mod 11
n.set_mod("b") = False
0
0 mod 2

2- Testing residue:
9 mod 4
n.get_residue() = 1
n.get_residue_list() = [0, 1, 2, 3]
3 mod 9
n.get_residue() = 3
n.get_residue_list() = [0, 1, 2, 3, 4, 5, 6, 7, 8]
243 mod 15
n.get_residue() = 3
n.get_residue_list() = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]

3- Testing is_congruent:
n1 = 11 mod 33
n2 = 26 mod 15
n1.is_congruent(n2) = False
n2 = 117 mod 37
n1.is_congruent(n2) = False
n2 = 344 mod 37
n1.is_congruent(n2) = False

4- Testing add:
17 mod 7
23 mod 7
MOD.add(17,23) = 5 mod 7

-17 mod 7
17 mod 7
MOD.add(-17,17) = 0 mod 7

16 mod 4
16 mod 8
MOD.add(16,16) = Error(MOD.add): invalid input

5- Testing sub:
17 mod 7
25 mod 7
MOD.sub(17,25) = 6 mod 7

-17 mod 7
17 mod 7
MOD.sub(-17,17) = 1 mod 7

16 mod 4
16 mod 8
MOD.sub(16,16) = Error(MOD.sub): invalid input

6- Testing additive inverse:
n = 3 mod 5
n.get_add_inv() = 2

n = 5 mod 9
n.get_add_inv() = 4

n = 2 mod 8
n.get_add_inv() = 6

7- Testing additive and subtractive tables: 
m = 7
additive_table  = 
[[0, 1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 0], [2, 3, 4, 5, 6, 0, 1], [3, 4, 5, 6, 0, 1, 2], [4, 5, 6, 0, 1, 2, 3], [5, 6, 0, 1, 2, 3, 4], [6, 0, 1, 2, 3, 4, 5]]
subtractive_table = 
[[0, 6, 5, 4, 3, 2, 1], [1, 0, 6, 5, 4, 3, 2], [2, 1, 0, 6, 5, 4, 3], [3, 2, 1, 0, 6, 5, 4], [4, 3, 2, 1, 0, 6, 5], [5, 4, 3, 2, 1, 0, 6], [6, 5, 4, 3, 2, 1, 0]]

m = 11
additive_table  = 
[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0], [2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 1], [3, 4, 5, 6, 7, 8, 9, 10, 0, 1, 2], [4, 5, 6, 7, 8, 9, 10, 0, 1, 2, 3], [5, 6, 7, 8, 9, 10, 0, 1, 2, 3, 4], [6, 7, 8, 9, 10, 0, 1, 2, 3, 4, 5], [7, 8, 9, 10, 0, 1, 2, 3, 4, 5, 6], [8, 9, 10, 0, 1, 2, 3, 4, 5, 6, 7], [9, 10, 0, 1, 2, 3, 4, 5, 6, 7, 8], [10, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]]
subtractive_table = 
[[0, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1], [1, 0, 10, 9, 8, 7, 6, 5, 4, 3, 2], [2, 1, 0, 10, 9, 8, 7, 6, 5, 4, 3], [3, 2, 1, 0, 10, 9, 8, 7, 6, 5, 4], [4, 3, 2, 1, 0, 10, 9, 8, 7, 6, 5], [5, 4, 3, 2, 1, 0, 10, 9, 8, 7, 6], [6, 5, 4, 3, 2, 1, 0, 10, 9, 8, 7], [7, 6, 5, 4, 3, 2, 1, 0, 10, 9, 8], [8, 7, 6, 5, 4, 3, 2, 1, 0, 10, 9], [9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 10], [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]]

m = 0
additive_table  = 
Error(MOD.get_add_table): invalid input
subtractive_table = 
Error(Mod.get_sub_table): invalid input

8- Testing additive inverse table tables: 
m = 7
add_inv_table  = 
[[0, 1, 2, 3, 4, 5, 6], [0, 6, 5, 4, 3, 2, 1]]

m = 11
add_inv_table  = 
[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]]

m = 0
add_inv_table  = 
Error(MOD.get_add_inv_table): invalid input

9- Testing mul:
17 mod 7
22 mod 7
MOD.mul(17,22) = 3 mod 7

-17 mod 7
17 mod 7
MOD.mul(-17,17) = 5 mod 7

16 mod 4
16 mod 8
MOD.mul(16,16) = Error(MOD.mul): invalid input

10- Testing multiplicative tables: 
m = 6
mul_table  = 
[[0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5], [0, 2, 4, 0, 2, 4], [0, 3, 0, 3, 0, 3], [0, 4, 2, 0, 4, 2], [0, 5, 4, 3, 2, 1]]

m = 11
mul_table  = 
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0, 2, 4, 6, 8, 10, 1, 3, 5, 7, 9], [0, 3, 6, 9, 1, 4, 7, 10, 2, 5, 8], [0, 4, 8, 1, 5, 9, 2, 6, 10, 3, 7], [0, 5, 10, 4, 9, 3, 8, 2, 7, 1, 6], [0, 6, 1, 7, 2, 8, 3, 9, 4, 10, 5], [0, 7, 3, 10, 6, 2, 9, 5, 1, 8, 4], [0, 8, 5, 2, 10, 7, 4, 1, 9, 6, 3], [0, 9, 7, 5, 3, 1, 10, 8, 6, 4, 2], [0, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]]

m = 0
mul_table  = 
Error(MOD.get_mul_table): invalid input

11- Testing is_prime:
MOD.is_prime(97) =  True
MOD.is_prime(479) =  True
MOD.is_prime(1044) =  False
MOD.is_prime(0) =  False
MOD.is_prime(-17) =  False
MOD.is_prime(-11) =  False
MOD.is_prime(1381) =  True

12- Testing gcd:
MOD.gcd(629,357) =  17
MOD.gcd(440,700) =  20
MOD.gcd(-30,700) =  10
MOD.gcd(540,-539) =  1
MOD.gcd(711,0) =  Error(MOD.gcd): invalid input
MOD.gcd(0,311) =  Error(MOD.gcd): invalid input
MOD.gcd([9],27) =  Error(MOD.gcd): invalid input

13- Testing is_relatively_prime:
is_relatively_prime(4,5) = True
is_relatively_prime(540,539) = True
is_relatively_prime(18,26) = False
is_relatively_prime(0,26) = False
is_relatively_prime([1],26) = Error(MOD.is_relatively_prime): invalid input

14- Testing has_mul_inv:
has_mul_inv(4) = True
has_mul_inv(17) = True
has_mul_inv(18) = False
has_mul_inv(0) = False
has_mul_inv(13) = False

15- Testing EEA:
MOD.EEA(700,440) = [20, -5, 8]
MOD.EEA(88,35) = [1, 2, -5]
MOD.EEA(35,88) = [1, -5, 2]
MOD.EEA(-88,35) = [1, 2, -5]
MOD.EEA(88,-35) = [1, 2, -5]
MOD.EEA(0,777) = Error(MOD.EEA): invalid input

16- Testing get_mul_inv:
get_mul_inv(23) =   17
get_mul_inv(5) =   5
get_mul_inv(15) =   7
get_mul_inv(24) =   NA
get_mul_inv(700) =   NA
get_mul_inv(0) =   NA

17- Testing multiplicative inverse table: 
m = 11
MOD.mul_inv_table  = 
[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], ['NA', 1, 6, 4, 3, 9, 2, 8, 7, 5, 10]]

m = 6
MOD.mul_inv_table  = 
[[0, 1, 2, 3, 4, 5], ['NA', 1, 'NA', 'NA', 'NA', 5]]

m = 0
MOD.mul_inv_table  = 
Error(MOD.get_mul_inv_table): invalid input

End of Modular Arithmetic Testing
----------------------------------------

----------------------------------------
Start of Decimation Basic Testing

Creating a decimation cipher object using default constructor:
Decimation Cipher:
y = 3x mod 26
x = 9y mod 26

Testing Decimation.valaid_key:
[7, 0, 26] --> False
(11.2, 0, 26) --> False
(130, 200) --> False
(7, 0, '77') --> False
(13, 0, 26) --> False
(18, 15, 3) --> False
(22, 31, 99) --> False
(3, 59, 60) --> False
(11, 0, 26) --> True
(17, 3, 41) --> True

Testing set_key, get_key, get_base and __str__:
Setting Decimation key to (7, 0, 26)
	Success = True
	get_key = (7, 0, 26)
	get_base = abcdefghijklmnopqrstuvwxyz
Decimation Cipher:
y = 7x mod 26
x = 15y mod 26

Setting Decimation key to (19, 3, 39)
	Success = True
	get_key = (19, 3, 39)
	get_base = defghijklmnopqrstuvwxyz !"#$%&'()*+,
Decimation Cipher:
y = 19x mod 36
x = 19y mod 36

Setting Decimation key to (-5, 4, 41)
	Success = True
	get_key = (32, 4, 41)
	get_base = efghijklmnopqrstuvwxyz !"#$%&'()*+,-.
Decimation Cipher:
y = 32x mod 37
x = 22y mod 37

Setting Decimation key to (632, 11, 84)
	Success = True
	get_key = (48, 11, 84)
	get_base = lmnopqrstuvwxyz !"#$%&'()*+,-./:;<=>?@[\]^_`{|}~0123456789ABCDEFGHIJKLMNO
Decimation Cipher:
y = 48x mod 73
x = 35y mod 73

Setting Decimation key to (46, 13, 82)
	Success = False
	get_key = (3, 0, 26)
	get_base = abcdefghijklmnopqrstuvwxyz
Decimation Cipher:
y = 3x mod 26
x = 9y mod 26

End of Decimation Cipher basic Testing
----------------------------------------

----------------------------------------
Start of Decimation Testing

--------------- Testing Encryption/Decryption:
Decimation Cipher:
y = 5x mod 26
x = 21y mod 26
plaintext =   Strike in progress
ciphertext=   Srhoyu on xhsehumm
plaintext2=   Strike in progress

Decimation Cipher:
y = 17x mod 29
x = 12y mod 29
plaintext =   Is mission accomplished?
ciphertext=   Iqhbuqqugshaffgbxnuqdkw?
plaintext2=   Is mission accomplished?

Decimation Cipher:
y = 10x mod 57
x = 40y mod 57
plaintext =   Mission Failed!
ciphertext=   M<$$<?+_Fa<redg
plaintext2=   Mission Failed!

Decimation Cipher:
y = 11x mod 80
x = 51y mod 80
plaintext =   Plan B ... initiated
ciphertext=   ola'quqVVVqi'itiated
plaintext2=   Plan B ... initiated

End of Decimation Cipher Testing
----------------------------------------

----------------------------------------
Start of Decimation Cryptanalysis Testing

Testing cryptanalyze_keys:
args = [0, 0, 26]
#keys = 0

args = [11, 0, 26]
#keys = 1
keys[:20] = [(11, 0, 26)]
keys[-1] = (11, 0, 26)

args = [-1, 0, 26]
#keys = 11
keys[:20] = [(3, 0, 26), (5, 0, 26), (7, 0, 26), (9, 0, 26), (11, 0, 26), (15, 0, 26), (17, 0, 26), (19, 0, 26), (21, 0, 26), (23, 0, 26), (25, 0, 26)]
keys[-1] = (25, 0, 26)

args = [-1, 3, 49]
#keys = 21
keys[:20] = [(3, 3, 49), (5, 3, 49), (7, 3, 49), (9, 3, 49), (11, 3, 49), (13, 3, 49), (15, 3, 49), (17, 3, 49), (19, 3, 49), (21, 3, 49), (25, 3, 49), (27, 3, 49), (29, 3, 49), (31, 3, 49), (33, 3, 49), (35, 3, 49), (37, 3, 49), (39, 3, 49), (41, 3, 49), (43, 3, 49)]
keys[-1] = (45, 3, 49)

args = [9, -1, 29]
#keys = 19
keys[:20] = [(9, 0, 29), (9, 1, 29), (9, 3, 29), (9, 4, 29), (9, 6, 29), (9, 7, 29), (9, 9, 29), (9, 10, 29), (9, 12, 29), (9, 13, 29), (9, 15, 29), (9, 16, 29), (9, 18, 29), (9, 19, 29), (9, 21, 29), (9, 22, 29), (9, 24, 29), (9, 25, 29), (9, 27, 29)]
keys[-1] = (9, 27, 29)

args = [23, -1, 33]
#keys = 31
keys[:20] = [(23, 0, 33), (23, 1, 33), (23, 2, 33), (23, 3, 33), (23, 4, 33), (23, 5, 33), (23, 6, 33), (23, 7, 33), (23, 8, 33), (23, 9, 33), (23, 11, 33), (23, 12, 33), (23, 13, 33), (23, 14, 33), (23, 15, 33), (23, 16, 33), (23, 17, 33), (23, 18, 33), (23, 19, 33), (23, 20, 33)]
keys[-1] = (23, 31, 33)

args = [2, 5, -1]
#keys = 44
keys[:20] = [(2, 5, 8), (2, 5, 10), (2, 5, 12), (2, 5, 14), (2, 5, 16), (2, 5, 18), (2, 5, 20), (2, 5, 22), (2, 5, 24), (2, 5, 26), (2, 5, 28), (2, 5, 30), (2, 5, 32), (2, 5, 34), (2, 5, 36), (2, 5, 38), (2, 5, 40), (2, 5, 42), (2, 5, 44), (2, 5, 46)]
keys[-1] = (2, 5, 94)

args = [13, 42, -1]
#keys = 48
keys[:20] = [(13, 42, 44), (13, 42, 45), (13, 42, 46), (13, 42, 47), (13, 42, 48), (13, 42, 49), (13, 42, 50), (13, 42, 51), (13, 42, 52), (13, 42, 53), (13, 42, 54), (13, 42, 56), (13, 42, 57), (13, 42, 58), (13, 42, 59), (13, 42, 60), (13, 42, 61), (13, 42, 62), (13, 42, 63), (13, 42, 64)]
keys[-1] = (13, 42, 95)

args = [-1, -1, 32]
#keys = 292
keys[:20] = [(3, 0, 32), (5, 0, 32), (7, 0, 32), (9, 0, 32), (11, 0, 32), (13, 0, 32), (15, 0, 32), (17, 0, 32), (19, 0, 32), (21, 0, 32), (23, 0, 32), (25, 0, 32), (27, 0, 32), (29, 0, 32), (31, 0, 32), (2, 1, 32), (3, 1, 32), (4, 1, 32), (5, 1, 32), (6, 1, 32)]
keys[-1] = (2, 29, 32)

args = [-1, -1, 9]
#keys = 19
keys[:20] = [(2, 0, 9), (4, 0, 9), (5, 0, 9), (7, 0, 9), (8, 0, 9), (3, 1, 9), (5, 1, 9), (7, 1, 9), (2, 2, 9), (3, 2, 9), (4, 2, 9), (5, 2, 9), (6, 2, 9), (5, 3, 9), (2, 4, 9), (3, 4, 9), (4, 4, 9), (3, 5, 9), (2, 6, 9)]
keys[-1] = (2, 6, 9)

args = [-1, 15, -1]
#keys = 1886
keys[:20] = [(2, 15, 18), (3, 15, 19), (2, 15, 20), (3, 15, 20), (4, 15, 20), (5, 15, 21), (2, 15, 22), (3, 15, 22), (4, 15, 22), (5, 15, 22), (6, 15, 22), (3, 15, 23), (5, 15, 23), (7, 15, 23), (2, 15, 24), (4, 15, 24), (5, 15, 24), (7, 15, 24), (8, 15, 24), (3, 15, 25)]
keys[-1] = (79, 15, 95)

args = [-1, 56, -1]
#keys = 435
keys[:20] = [(2, 56, 59), (3, 56, 60), (2, 56, 61), (3, 56, 61), (4, 56, 61), (5, 56, 62), (2, 56, 63), (3, 56, 63), (4, 56, 63), (5, 56, 63), (6, 56, 63), (3, 56, 64), (5, 56, 64), (7, 56, 64), (2, 56, 65), (4, 56, 65), (5, 56, 65), (7, 56, 65), (8, 56, 65), (3, 56, 66)]
keys[-1] = (38, 56, 95)

args = [1, -1, -1]
#keys = 0

args = [88, -1, -1]
#keys = 16
keys[:20] = [(88, 0, 89), (88, 0, 91), (88, 0, 93), (88, 0, 95), (88, 1, 90), (88, 1, 92), (88, 1, 94), (88, 2, 91), (88, 2, 93), (88, 2, 95), (88, 3, 92), (88, 3, 94), (88, 4, 93), (88, 4, 95), (88, 5, 94), (88, 6, 95)]
keys[-1] = (88, 6, 95)

args = [59, -1, -1]
#keys = 666
keys[:20] = [(59, 0, 60), (59, 0, 61), (59, 0, 62), (59, 0, 63), (59, 0, 64), (59, 0, 65), (59, 0, 66), (59, 0, 67), (59, 0, 68), (59, 0, 69), (59, 0, 70), (59, 0, 71), (59, 0, 72), (59, 0, 73), (59, 0, 74), (59, 0, 75), (59, 0, 76), (59, 0, 77), (59, 0, 78), (59, 0, 79)]
keys[-1] = (59, 35, 95)

Testing cryptanalysis:
[(3, 0, 26), (5, 0, 26), (7, 0, 26), (9, 0, 26), (11, 0, 26), (15, 0, 26), (17, 0, 26), (19, 0, 26), (21, 0, 26), (23, 0, 26), (25, 0, 26)]
ciphertext= Srhoyu In Phsehumm
plaintext = Strike In Progress
key       = (5, 0, 26)

[(29, 10, 12), (29, 10, 13), (29, 10, 14), (29, 10, 15), (29, 10, 16), (29, 10, 17), (29, 10, 18), (29, 10, 19), (29, 10, 20), (29, 10, 21), (29, 10, 22), (29, 10, 23), (29, 10, 24), (29, 10, 25), (29, 10, 26), (29, 10, 27), (29, 10, 28), (29, 10, 29), (29, 10, 30), (29, 10, 31), (29, 10, 32), (29, 10, 33), (29, 10, 34), (29, 10, 35), (29, 10, 36), (29, 10, 37), (29, 10, 38), (29, 10, 40), (29, 10, 41), (29, 10, 42), (29, 10, 43), (29, 10, 44), (29, 10, 45), (29, 10, 46), (29, 10, 47), (29, 10, 48), (29, 10, 49), (29, 10, 50), (29, 10, 51), (29, 10, 52), (29, 10, 53), (29, 10, 54), (29, 10, 55), (29, 10, 56), (29, 10, 57), (29, 10, 58), (29, 10, 59), (29, 10, 60), (29, 10, 61), (29, 10, 62), (29, 10, 63), (29, 10, 64), (29, 10, 65), (29, 10, 66), (29, 10, 67), (29, 10, 69), (29, 10, 70), (29, 10, 71), (29, 10, 72), (29, 10, 73), (29, 10, 74), (29, 10, 75), (29, 10, 76), (29, 10, 77), (29, 10, 78), (29, 10, 79), (29, 10, 80), (29, 10, 81), (29, 10, 82), (29, 10, 83), (29, 10, 84), (29, 10, 85), (29, 10, 86), (29, 10, 87), (29, 10, 88), (29, 10, 89), (29, 10, 90), (29, 10, 91), (29, 10, 92), (29, 10, 93), (29, 10, 94), (29, 10, 95)]
ciphertext= O%_ikeF'rFH_>g_eNN
plaintext = Strike In Progress
key       = (29, 10, 90)

[(28, 0, 29), (28, 0, 31), (28, 0, 33), (28, 0, 37), (28, 0, 39), (28, 0, 41), (28, 0, 43), (28, 0, 45), (28, 0, 47), (28, 0, 51), (28, 0, 53), (28, 0, 55), (28, 0, 57), (28, 0, 59), (28, 0, 61), (28, 0, 65), (28, 0, 67), (28, 0, 69), (28, 0, 71), (28, 0, 73), (28, 0, 75), (28, 0, 79), (28, 0, 81), (28, 0, 83), (28, 0, 85), (28, 0, 87), (28, 0, 89), (28, 0, 93), (28, 0, 95), (28, 1, 30), (28, 1, 32), (28, 1, 34), (28, 1, 38), (28, 1, 40), (28, 1, 42), (28, 1, 44), (28, 1, 46), (28, 1, 48), (28, 1, 52), (28, 1, 54), (28, 1, 56), (28, 1, 58), (28, 1, 60), (28, 1, 62), (28, 1, 66), (28, 1, 68), (28, 1, 70), (28, 1, 72), (28, 1, 74), (28, 1, 76), (28, 1, 80), (28, 1, 82), (28, 1, 84), (28, 1, 86), (28, 1, 88), (28, 1, 90), (28, 1, 94), (28, 2, 31), (28, 2, 33), (28, 2, 35), (28, 2, 39), (28, 2, 41), (28, 2, 43), (28, 2, 45), (28, 2, 47), (28, 2, 49), (28, 2, 53), (28, 2, 55), (28, 2, 57), (28, 2, 59), (28, 2, 61), (28, 2, 63), (28, 2, 67), (28, 2, 69), (28, 2, 71), (28, 2, 73), (28, 2, 75), (28, 2, 77), (28, 2, 81), (28, 2, 83), (28, 2, 85), (28, 2, 87), (28, 2, 89), (28, 2, 91), (28, 2, 95), (28, 3, 32), (28, 3, 34), (28, 3, 36), (28, 3, 40), (28, 3, 42), (28, 3, 44), (28, 3, 46), (28, 3, 48), (28, 3, 50), (28, 3, 54), (28, 3, 56), (28, 3, 58), (28, 3, 60), (28, 3, 62), (28, 3, 64), (28, 3, 68), (28, 3, 70), (28, 3, 72), (28, 3, 74), (28, 3, 76), (28, 3, 78), (28, 3, 82), (28, 3, 84), (28, 3, 86), (28, 3, 88), (28, 3, 90), (28, 3, 92), (28, 4, 33), (28, 4, 35), (28, 4, 37), (28, 4, 41), (28, 4, 43), (28, 4, 45), (28, 4, 47), (28, 4, 49), (28, 4, 51), (28, 4, 55), (28, 4, 57), (28, 4, 59), (28, 4, 61), (28, 4, 63), (28, 4, 65), (28, 4, 69), (28, 4, 71), (28, 4, 73), (28, 4, 75), (28, 4, 77), (28, 4, 79), (28, 4, 83), (28, 4, 85), (28, 4, 87), (28, 4, 89), (28, 4, 91), (28, 4, 93), (28, 5, 34), (28, 5, 36), (28, 5, 38), (28, 5, 42), (28, 5, 44), (28, 5, 46), (28, 5, 48), (28, 5, 50), (28, 5, 52), (28, 5, 56), (28, 5, 58), (28, 5, 60), (28, 5, 62), (28, 5, 64), (28, 5, 66), (28, 5, 70), (28, 5, 72), (28, 5, 74), (28, 5, 76), (28, 5, 78), (28, 5, 80), (28, 5, 84), (28, 5, 86), (28, 5, 88), (28, 5, 90), (28, 5, 92), (28, 5, 94), (28, 6, 35), (28, 6, 37), (28, 6, 39), (28, 6, 43), (28, 6, 45), (28, 6, 47), (28, 6, 49), (28, 6, 51), (28, 6, 53), (28, 6, 57), (28, 6, 59), (28, 6, 61), (28, 6, 63), (28, 6, 65), (28, 6, 67), (28, 6, 71), (28, 6, 73), (28, 6, 75), (28, 6, 77), (28, 6, 79), (28, 6, 81), (28, 6, 85), (28, 6, 87), (28, 6, 89), (28, 6, 91), (28, 6, 93), (28, 6, 95), (28, 7, 36), (28, 7, 38), (28, 7, 40), (28, 7, 44), (28, 7, 46), (28, 7, 48), (28, 7, 50), (28, 7, 52), (28, 7, 54), (28, 7, 58), (28, 7, 60), (28, 7, 62), (28, 7, 64), (28, 7, 66), (28, 7, 68), (28, 7, 72), (28, 7, 74), (28, 7, 76), (28, 7, 78), (28, 7, 80), (28, 7, 82), (28, 7, 86), (28, 7, 88), (28, 7, 90), (28, 7, 92), (28, 7, 94), (28, 8, 37), (28, 8, 39), (28, 8, 41), (28, 8, 45), (28, 8, 47), (28, 8, 49), (28, 8, 51), (28, 8, 53), (28, 8, 55), (28, 8, 59), (28, 8, 61), (28, 8, 63), (28, 8, 65), (28, 8, 67), (28, 8, 69), (28, 8, 73), (28, 8, 75), (28, 8, 77), (28, 8, 79), (28, 8, 81), (28, 8, 83), (28, 8, 87), (28, 8, 89), (28, 8, 91), (28, 8, 93), (28, 8, 95), (28, 9, 38), (28, 9, 40), (28, 9, 42), (28, 9, 46), (28, 9, 48), (28, 9, 50), (28, 9, 52), (28, 9, 54), (28, 9, 56), (28, 9, 60), (28, 9, 62), (28, 9, 64), (28, 9, 66), (28, 9, 68), (28, 9, 70), (28, 9, 74), (28, 9, 76), (28, 9, 78), (28, 9, 80), (28, 9, 82), (28, 9, 84), (28, 9, 88), (28, 9, 90), (28, 9, 92), (28, 9, 94), (28, 10, 39), (28, 10, 41), (28, 10, 43), (28, 10, 47), (28, 10, 49), (28, 10, 51), (28, 10, 53), (28, 10, 55), (28, 10, 57), (28, 10, 61), (28, 10, 63), (28, 10, 65), (28, 10, 67), (28, 10, 69), (28, 10, 71), (28, 10, 75), (28, 10, 77), (28, 10, 79), (28, 10, 81), (28, 10, 83), (28, 10, 85), (28, 10, 89), (28, 10, 91), (28, 10, 93), (28, 10, 95), (28, 11, 40), (28, 11, 42), (28, 11, 44), (28, 11, 48), (28, 11, 50), (28, 11, 52), (28, 11, 54), (28, 11, 56), (28, 11, 58), (28, 11, 62), (28, 11, 64), (28, 11, 66), (28, 11, 68), (28, 11, 70), (28, 11, 72), (28, 11, 76), (28, 11, 78), (28, 11, 80), (28, 11, 82), (28, 11, 84), (28, 11, 86), (28, 11, 90), (28, 11, 92), (28, 11, 94), (28, 12, 41), (28, 12, 43), (28, 12, 45), (28, 12, 49), (28, 12, 51), (28, 12, 53), (28, 12, 55), (28, 12, 57), (28, 12, 59), (28, 12, 63), (28, 12, 65), (28, 12, 67), (28, 12, 69), (28, 12, 71), (28, 12, 73), (28, 12, 77), (28, 12, 79), (28, 12, 81), (28, 12, 83), (28, 12, 85), (28, 12, 87), (28, 12, 91), (28, 12, 93), (28, 12, 95), (28, 13, 42), (28, 13, 44), (28, 13, 46), (28, 13, 50), (28, 13, 52), (28, 13, 54), (28, 13, 56), (28, 13, 58), (28, 13, 60), (28, 13, 64), (28, 13, 66), (28, 13, 68), (28, 13, 70), (28, 13, 72), (28, 13, 74), (28, 13, 78), (28, 13, 80), (28, 13, 82), (28, 13, 84), (28, 13, 86), (28, 13, 88), (28, 13, 92), (28, 13, 94), (28, 14, 43), (28, 14, 45), (28, 14, 47), (28, 14, 51), (28, 14, 53), (28, 14, 55), (28, 14, 57), (28, 14, 59), (28, 14, 61), (28, 14, 65), (28, 14, 67), (28, 14, 69), (28, 14, 71), (28, 14, 73), (28, 14, 75), (28, 14, 79), (28, 14, 81), (28, 14, 83), (28, 14, 85), (28, 14, 87), (28, 14, 89), (28, 14, 93), (28, 14, 95), (28, 15, 44), (28, 15, 46), (28, 15, 48), (28, 15, 52), (28, 15, 54), (28, 15, 56), (28, 15, 58), (28, 15, 60), (28, 15, 62), (28, 15, 66), (28, 15, 68), (28, 15, 70), (28, 15, 72), (28, 15, 74), (28, 15, 76), (28, 15, 80), (28, 15, 82), (28, 15, 84), (28, 15, 86), (28, 15, 88), (28, 15, 90), (28, 15, 94), (28, 16, 45), (28, 16, 47), (28, 16, 49), (28, 16, 53), (28, 16, 55), (28, 16, 57), (28, 16, 59), (28, 16, 61), (28, 16, 63), (28, 16, 67), (28, 16, 69), (28, 16, 71), (28, 16, 73), (28, 16, 75), (28, 16, 77), (28, 16, 81), (28, 16, 83), (28, 16, 85), (28, 16, 87), (28, 16, 89), (28, 16, 91), (28, 16, 95), (28, 17, 46), (28, 17, 48), (28, 17, 50), (28, 17, 54), (28, 17, 56), (28, 17, 58), (28, 17, 60), (28, 17, 62), (28, 17, 64), (28, 17, 68), (28, 17, 70), (28, 17, 72), (28, 17, 74), (28, 17, 76), (28, 17, 78), (28, 17, 82), (28, 17, 84), (28, 17, 86), (28, 17, 88), (28, 17, 90), (28, 17, 92), (28, 18, 47), (28, 18, 49), (28, 18, 51), (28, 18, 55), (28, 18, 57), (28, 18, 59), (28, 18, 61), (28, 18, 63), (28, 18, 65), (28, 18, 69), (28, 18, 71), (28, 18, 73), (28, 18, 75), (28, 18, 77), (28, 18, 79), (28, 18, 83), (28, 18, 85), (28, 18, 87), (28, 18, 89), (28, 18, 91), (28, 18, 93), (28, 19, 48), (28, 19, 50), (28, 19, 52), (28, 19, 56), (28, 19, 58), (28, 19, 60), (28, 19, 62), (28, 19, 64), (28, 19, 66), (28, 19, 70), (28, 19, 72), (28, 19, 74), (28, 19, 76), (28, 19, 78), (28, 19, 80), (28, 19, 84), (28, 19, 86), (28, 19, 88), (28, 19, 90), (28, 19, 92), (28, 19, 94), (28, 20, 49), (28, 20, 51), (28, 20, 53), (28, 20, 57), (28, 20, 59), (28, 20, 61), (28, 20, 63), (28, 20, 65), (28, 20, 67), (28, 20, 71), (28, 20, 73), (28, 20, 75), (28, 20, 77), (28, 20, 79), (28, 20, 81), (28, 20, 85), (28, 20, 87), (28, 20, 89), (28, 20, 91), (28, 20, 93), (28, 20, 95), (28, 21, 50), (28, 21, 52), (28, 21, 54), (28, 21, 58), (28, 21, 60), (28, 21, 62), (28, 21, 64), (28, 21, 66), (28, 21, 68), (28, 21, 72), (28, 21, 74), (28, 21, 76), (28, 21, 78), (28, 21, 80), (28, 21, 82), (28, 21, 86), (28, 21, 88), (28, 21, 90), (28, 21, 92), (28, 21, 94), (28, 22, 51), (28, 22, 53), (28, 22, 55), (28, 22, 59), (28, 22, 61), (28, 22, 63), (28, 22, 65), (28, 22, 67), (28, 22, 69), (28, 22, 73), (28, 22, 75), (28, 22, 77), (28, 22, 79), (28, 22, 81), (28, 22, 83), (28, 22, 87), (28, 22, 89), (28, 22, 91), (28, 22, 93), (28, 22, 95), (28, 23, 52), (28, 23, 54), (28, 23, 56), (28, 23, 60), (28, 23, 62), (28, 23, 64), (28, 23, 66), (28, 23, 68), (28, 23, 70), (28, 23, 74), (28, 23, 76), (28, 23, 78), (28, 23, 80), (28, 23, 82), (28, 23, 84), (28, 23, 88), (28, 23, 90), (28, 23, 92), (28, 23, 94), (28, 24, 53), (28, 24, 55), (28, 24, 57), (28, 24, 61), (28, 24, 63), (28, 24, 65), (28, 24, 67), (28, 24, 69), (28, 24, 71), (28, 24, 75), (28, 24, 77), (28, 24, 79), (28, 24, 81), (28, 24, 83), (28, 24, 85), (28, 24, 89), (28, 24, 91), (28, 24, 93), (28, 24, 95), (28, 25, 54), (28, 25, 56), (28, 25, 58), (28, 25, 62), (28, 25, 64), (28, 25, 66), (28, 25, 68), (28, 25, 70), (28, 25, 72), (28, 25, 76), (28, 25, 78), (28, 25, 80), (28, 25, 82), (28, 25, 84), (28, 25, 86), (28, 25, 90), (28, 25, 92), (28, 25, 94), (28, 26, 55), (28, 26, 57), (28, 26, 59), (28, 26, 63), (28, 26, 65), (28, 26, 67), (28, 26, 69), (28, 26, 71), (28, 26, 73), (28, 26, 77), (28, 26, 79), (28, 26, 81), (28, 26, 83), (28, 26, 85), (28, 26, 87), (28, 26, 91), (28, 26, 93), (28, 26, 95), (28, 27, 56), (28, 27, 58), (28, 27, 60), (28, 27, 64), (28, 27, 66), (28, 27, 68), (28, 27, 70), (28, 27, 72), (28, 27, 74), (28, 27, 78), (28, 27, 80), (28, 27, 82), (28, 27, 84), (28, 27, 86), (28, 27, 88), (28, 27, 92), (28, 27, 94), (28, 28, 57), (28, 28, 59), (28, 28, 61), (28, 28, 65), (28, 28, 67), (28, 28, 69), (28, 28, 71), (28, 28, 73), (28, 28, 75), (28, 28, 79), (28, 28, 81), (28, 28, 83), (28, 28, 85), (28, 28, 87), (28, 28, 89), (28, 28, 93), (28, 28, 95), (28, 29, 58), (28, 29, 60), (28, 29, 62), (28, 29, 66), (28, 29, 68), (28, 29, 70), (28, 29, 72), (28, 29, 74), (28, 29, 76), (28, 29, 80), (28, 29, 82), (28, 29, 84), (28, 29, 86), (28, 29, 88), (28, 29, 90), (28, 29, 94), (28, 30, 59), (28, 30, 61), (28, 30, 63), (28, 30, 67), (28, 30, 69), (28, 30, 71), (28, 30, 73), (28, 30, 75), (28, 30, 77), (28, 30, 81), (28, 30, 83), (28, 30, 85), (28, 30, 87), (28, 30, 89), (28, 30, 91), (28, 30, 95), (28, 31, 60), (28, 31, 62), (28, 31, 64), (28, 31, 68), (28, 31, 70), (28, 31, 72), (28, 31, 74), (28, 31, 76), (28, 31, 78), (28, 31, 82), (28, 31, 84), (28, 31, 86), (28, 31, 88), (28, 31, 90), (28, 31, 92), (28, 32, 61), (28, 32, 63), (28, 32, 65), (28, 32, 69), (28, 32, 71), (28, 32, 73), (28, 32, 75), (28, 32, 77), (28, 32, 79), (28, 32, 83), (28, 32, 85), (28, 32, 87), (28, 32, 89), (28, 32, 91), (28, 32, 93), (28, 33, 62), (28, 33, 64), (28, 33, 66), (28, 33, 70), (28, 33, 72), (28, 33, 74), (28, 33, 76), (28, 33, 78), (28, 33, 80), (28, 33, 84), (28, 33, 86), (28, 33, 88), (28, 33, 90), (28, 33, 92), (28, 33, 94), (28, 34, 63), (28, 34, 65), (28, 34, 67), (28, 34, 71), (28, 34, 73), (28, 34, 75), (28, 34, 77), (28, 34, 79), (28, 34, 81), (28, 34, 85), (28, 34, 87), (28, 34, 89), (28, 34, 91), (28, 34, 93), (28, 34, 95), (28, 35, 64), (28, 35, 66), (28, 35, 68), (28, 35, 72), (28, 35, 74), (28, 35, 76), (28, 35, 78), (28, 35, 80), (28, 35, 82), (28, 35, 86), (28, 35, 88), (28, 35, 90), (28, 35, 92), (28, 35, 94), (28, 36, 65), (28, 36, 67), (28, 36, 69), (28, 36, 73), (28, 36, 75), (28, 36, 77), (28, 36, 79), (28, 36, 81), (28, 36, 83), (28, 36, 87), (28, 36, 89), (28, 36, 91), (28, 36, 93), (28, 36, 95), (28, 37, 66), (28, 37, 68), (28, 37, 70), (28, 37, 74), (28, 37, 76), (28, 37, 78), (28, 37, 80), (28, 37, 82), (28, 37, 84), (28, 37, 88), (28, 37, 90), (28, 37, 92), (28, 37, 94), (28, 38, 67), (28, 38, 69), (28, 38, 71), (28, 38, 75), (28, 38, 77), (28, 38, 79), (28, 38, 81), (28, 38, 83), (28, 38, 85), (28, 38, 89), (28, 38, 91), (28, 38, 93), (28, 38, 95), (28, 39, 68), (28, 39, 70), (28, 39, 72), (28, 39, 76), (28, 39, 78), (28, 39, 80), (28, 39, 82), (28, 39, 84), (28, 39, 86), (28, 39, 90), (28, 39, 92), (28, 39, 94), (28, 40, 69), (28, 40, 71), (28, 40, 73), (28, 40, 77), (28, 40, 79), (28, 40, 81), (28, 40, 83), (28, 40, 85), (28, 40, 87), (28, 40, 91), (28, 40, 93), (28, 40, 95), (28, 41, 70), (28, 41, 72), (28, 41, 74), (28, 41, 78), (28, 41, 80), (28, 41, 82), (28, 41, 84), (28, 41, 86), (28, 41, 88), (28, 41, 92), (28, 41, 94), (28, 42, 71), (28, 42, 73), (28, 42, 75), (28, 42, 79), (28, 42, 81), (28, 42, 83), (28, 42, 85), (28, 42, 87), (28, 42, 89), (28, 42, 93), (28, 42, 95), (28, 43, 72), (28, 43, 74), (28, 43, 76), (28, 43, 80), (28, 43, 82), (28, 43, 84), (28, 43, 86), (28, 43, 88), (28, 43, 90), (28, 43, 94), (28, 44, 73), (28, 44, 75), (28, 44, 77), (28, 44, 81), (28, 44, 83), (28, 44, 85), (28, 44, 87), (28, 44, 89), (28, 44, 91), (28, 44, 95), (28, 45, 74), (28, 45, 76), (28, 45, 78), (28, 45, 82), (28, 45, 84), (28, 45, 86), (28, 45, 88), (28, 45, 90), (28, 45, 92), (28, 46, 75), (28, 46, 77), (28, 46, 79), (28, 46, 83), (28, 46, 85), (28, 46, 87), (28, 46, 89), (28, 46, 91), (28, 46, 93), (28, 47, 76), (28, 47, 78), (28, 47, 80), (28, 47, 84), (28, 47, 86), (28, 47, 88), (28, 47, 90), (28, 47, 92), (28, 47, 94), (28, 48, 77), (28, 48, 79), (28, 48, 81), (28, 48, 85), (28, 48, 87), (28, 48, 89), (28, 48, 91), (28, 48, 93), (28, 48, 95), (28, 49, 78), (28, 49, 80), (28, 49, 82), (28, 49, 86), (28, 49, 88), (28, 49, 90), (28, 49, 92), (28, 49, 94), (28, 50, 79), (28, 50, 81), (28, 50, 83), (28, 50, 87), (28, 50, 89), (28, 50, 91), (28, 50, 93), (28, 50, 95), (28, 51, 80), (28, 51, 82), (28, 51, 84), (28, 51, 88), (28, 51, 90), (28, 51, 92), (28, 51, 94), (28, 52, 81), (28, 52, 83), (28, 52, 85), (28, 52, 89), (28, 52, 91), (28, 52, 93), (28, 52, 95), (28, 53, 82), (28, 53, 84), (28, 53, 86), (28, 53, 90), (28, 53, 92), (28, 53, 94), (28, 54, 83), (28, 54, 85), (28, 54, 87), (28, 54, 91), (28, 54, 93), (28, 54, 95), (28, 55, 84), (28, 55, 86), (28, 55, 88), (28, 55, 92), (28, 55, 94), (28, 56, 85), (28, 56, 87), (28, 56, 89), (28, 56, 93), (28, 56, 95), (28, 57, 86), (28, 57, 88), (28, 57, 90), (28, 57, 94), (28, 58, 87), (28, 58, 89), (28, 58, 91), (28, 58, 95), (28, 59, 88), (28, 59, 90), (28, 59, 92), (28, 60, 89), (28, 60, 91), (28, 60, 93), (28, 61, 90), (28, 61, 92), (28, 61, 94), (28, 62, 91), (28, 62, 93), (28, 62, 95), (28, 63, 92), (28, 63, 94), (28, 64, 93), (28, 64, 95), (28, 65, 94), (28, 66, 95)]
ciphertext= t.hohlaohlt^&lwre$:l&)lcogjt&moaj.glrelt.r:l^&o\$]lcogjt&moaj.glt.atl^r\\l:t&jlg&?olwr$l:r:thol)o&!loha$remlg&?ol)r\h:/lae$lcogjt&moaj.glt.atl^r\\l:t&jl!a=&olm&yhoe!het:l)o&!loha$remlg&?ol)r\h:>
plaintext = there are two kinds of cryptography in this world: cryptography that will stop your kid sister from reading your files, and cryptography that will stop major governments from reading your files.
key       = (28, 2, 53)

[(2, 0, 61), (3, 0, 61), (4, 0, 61), (5, 0, 61), (6, 0, 61), (7, 0, 61), (8, 0, 61), (9, 0, 61), (10, 0, 61), (11, 0, 61), (12, 0, 61), (13, 0, 61), (14, 0, 61), (15, 0, 61), (16, 0, 61), (17, 0, 61), (18, 0, 61), (19, 0, 61), (20, 0, 61), (21, 0, 61), (22, 0, 61), (23, 0, 61), (24, 0, 61), (25, 0, 61), (26, 0, 61), (27, 0, 61), (28, 0, 61), (29, 0, 61), (30, 0, 61), (31, 0, 61), (32, 0, 61), (33, 0, 61), (34, 0, 61), (35, 0, 61), (36, 0, 61), (37, 0, 61), (38, 0, 61), (39, 0, 61), (40, 0, 61), (41, 0, 61), (42, 0, 61), (43, 0, 61), (44, 0, 61), (45, 0, 61), (46, 0, 61), (47, 0, 61), (48, 0, 61), (49, 0, 61), (50, 0, 61), (51, 0, 61), (52, 0, 61), (53, 0, 61), (54, 0, 61), (55, 0, 61), (56, 0, 61), (57, 0, 61), (58, 0, 61), (59, 0, 61), (60, 0, 61), (7, 1, 61), (11, 1, 61), (13, 1, 61), (17, 1, 61), (19, 1, 61), (23, 1, 61), (29, 1, 61), (31, 1, 61), (37, 1, 61), (41, 1, 61), (43, 1, 61), (47, 1, 61), (49, 1, 61), (53, 1, 61), (59, 1, 61), (2, 2, 61), (3, 2, 61), (4, 2, 61), (5, 2, 61), (6, 2, 61), (7, 2, 61), (8, 2, 61), (9, 2, 61), (10, 2, 61), (11, 2, 61), (12, 2, 61), (13, 2, 61), (14, 2, 61), (15, 2, 61), (16, 2, 61), (17, 2, 61), (18, 2, 61), (19, 2, 61), (20, 2, 61), (21, 2, 61), (22, 2, 61), (23, 2, 61), (24, 2, 61), (25, 2, 61), (26, 2, 61), (27, 2, 61), (28, 2, 61), (29, 2, 61), (30, 2, 61), (31, 2, 61), (32, 2, 61), (33, 2, 61), (34, 2, 61), (35, 2, 61), (36, 2, 61), (37, 2, 61), (38, 2, 61), (39, 2, 61), (40, 2, 61), (41, 2, 61), (42, 2, 61), (43, 2, 61), (44, 2, 61), (45, 2, 61), (46, 2, 61), (47, 2, 61), (48, 2, 61), (49, 2, 61), (50, 2, 61), (51, 2, 61), (52, 2, 61), (53, 2, 61), (54, 2, 61), (55, 2, 61), (56, 2, 61), (57, 2, 61), (58, 2, 61), (3, 3, 61), (5, 3, 61), (7, 3, 61), (9, 3, 61), (11, 3, 61), (13, 3, 61), (15, 3, 61), (17, 3, 61), (19, 3, 61), (21, 3, 61), (23, 3, 61), (25, 3, 61), (27, 3, 61), (31, 3, 61), (33, 3, 61), (35, 3, 61), (37, 3, 61), (39, 3, 61), (41, 3, 61), (43, 3, 61), (45, 3, 61), (47, 3, 61), (49, 3, 61), (51, 3, 61), (53, 3, 61), (55, 3, 61), (57, 3, 61), (2, 4, 61), (4, 4, 61), (5, 4, 61), (7, 4, 61), (8, 4, 61), (10, 4, 61), (11, 4, 61), (13, 4, 61), (14, 4, 61), (16, 4, 61), (17, 4, 61), (20, 4, 61), (22, 4, 61), (23, 4, 61), (25, 4, 61), (26, 4, 61), (28, 4, 61), (29, 4, 61), (31, 4, 61), (32, 4, 61), (34, 4, 61), (35, 4, 61), (37, 4, 61), (40, 4, 61), (41, 4, 61), (43, 4, 61), (44, 4, 61), (46, 4, 61), (47, 4, 61), (49, 4, 61), (50, 4, 61), (52, 4, 61), (53, 4, 61), (55, 4, 61), (56, 4, 61), (3, 5, 61), (5, 5, 61), (9, 5, 61), (11, 5, 61), (13, 5, 61), (15, 5, 61), (17, 5, 61), (19, 5, 61), (23, 5, 61), (25, 5, 61), (27, 5, 61), (29, 5, 61), (31, 5, 61), (33, 5, 61), (37, 5, 61), (39, 5, 61), (41, 5, 61), (43, 5, 61), (45, 5, 61), (47, 5, 61), (51, 5, 61), (53, 5, 61), (55, 5, 61), (2, 6, 61), (3, 6, 61), (4, 6, 61), (6, 6, 61), (7, 6, 61), (8, 6, 61), (9, 6, 61), (12, 6, 61), (13, 6, 61), (14, 6, 61), (16, 6, 61), (17, 6, 61), (18, 6, 61), (19, 6, 61), (21, 6, 61), (23, 6, 61), (24, 6, 61), (26, 6, 61), (27, 6, 61), (28, 6, 61), (29, 6, 61), (31, 6, 61), (32, 6, 61), (34, 6, 61), (36, 6, 61), (37, 6, 61), (38, 6, 61), (39, 6, 61), (41, 6, 61), (42, 6, 61), (43, 6, 61), (46, 6, 61), (47, 6, 61), (48, 6, 61), (49, 6, 61), (51, 6, 61), (52, 6, 61), (53, 6, 61), (54, 6, 61), (5, 7, 61), (7, 7, 61), (11, 7, 61), (13, 7, 61), (17, 7, 61), (19, 7, 61), (23, 7, 61), (25, 7, 61), (29, 7, 61), (31, 7, 61), (35, 7, 61), (37, 7, 61), (41, 7, 61), (43, 7, 61), (47, 7, 61), (49, 7, 61), (53, 7, 61), (2, 8, 61), (3, 8, 61), (4, 8, 61), (5, 8, 61), (6, 8, 61), (7, 8, 61), (8, 8, 61), (9, 8, 61), (10, 8, 61), (11, 8, 61), (12, 8, 61), (13, 8, 61), (14, 8, 61), (15, 8, 61), (16, 8, 61), (17, 8, 61), (18, 8, 61), (19, 8, 61), (20, 8, 61), (21, 8, 61), (22, 8, 61), (23, 8, 61), (24, 8, 61), (25, 8, 61), (26, 8, 61), (27, 8, 61), (28, 8, 61), (29, 8, 61), (30, 8, 61), (31, 8, 61), (32, 8, 61), (33, 8, 61), (34, 8, 61), (35, 8, 61), (36, 8, 61), (37, 8, 61), (38, 8, 61), (39, 8, 61), (40, 8, 61), (41, 8, 61), (42, 8, 61), (43, 8, 61), (44, 8, 61), (45, 8, 61), (46, 8, 61), (47, 8, 61), (48, 8, 61), (49, 8, 61), (50, 8, 61), (51, 8, 61), (52, 8, 61), (3, 9, 61), (5, 9, 61), (7, 9, 61), (9, 9, 61), (11, 9, 61), (15, 9, 61), (17, 9, 61), (19, 9, 61), (21, 9, 61), (23, 9, 61), (25, 9, 61), (27, 9, 61), (29, 9, 61), (31, 9, 61), (33, 9, 61), (35, 9, 61), (37, 9, 61), (41, 9, 61), (43, 9, 61), (45, 9, 61), (47, 9, 61), (49, 9, 61), (51, 9, 61), (2, 10, 61), (4, 10, 61), (5, 10, 61), (7, 10, 61), (8, 10, 61), (10, 10, 61), (11, 10, 61), (13, 10, 61), (14, 10, 61), (16, 10, 61), (19, 10, 61), (20, 10, 61), (22, 10, 61), (23, 10, 61), (25, 10, 61), (26, 10, 61), (28, 10, 61), (29, 10, 61), (31, 10, 61), (32, 10, 61), (35, 10, 61), (37, 10, 61), (38, 10, 61), (40, 10, 61), (41, 10, 61), (43, 10, 61), (44, 10, 61), (46, 10, 61), (47, 10, 61), (49, 10, 61), (50, 10, 61), (3, 11, 61), (7, 11, 61), (9, 11, 61), (11, 11, 61), (13, 11, 61), (17, 11, 61), (19, 11, 61), (21, 11, 61), (23, 11, 61), (27, 11, 61), (29, 11, 61), (31, 11, 61), (33, 11, 61), (37, 11, 61), (39, 11, 61), (41, 11, 61), (43, 11, 61), (47, 11, 61), (49, 11, 61), (2, 12, 61), (3, 12, 61), (4, 12, 61), (5, 12, 61), (6, 12, 61), (8, 12, 61), (9, 12, 61), (10, 12, 61), (11, 12, 61), (12, 12, 61), (13, 12, 61), (15, 12, 61), (16, 12, 61), (17, 12, 61), (18, 12, 61), (19, 12, 61), (20, 12, 61), (22, 12, 61), (23, 12, 61), (24, 12, 61), (25, 12, 61), (26, 12, 61), (27, 12, 61), (29, 12, 61), (30, 12, 61), (31, 12, 61), (32, 12, 61), (33, 12, 61), (34, 12, 61), (36, 12, 61), (37, 12, 61), (38, 12, 61), (39, 12, 61), (40, 12, 61), (41, 12, 61), (43, 12, 61), (44, 12, 61), (45, 12, 61), (46, 12, 61), (47, 12, 61), (48, 12, 61), (5, 13, 61), (7, 13, 61), (11, 13, 61), (13, 13, 61), (17, 13, 61), (19, 13, 61), (23, 13, 61), (25, 13, 61), (29, 13, 61), (31, 13, 61), (35, 13, 61), (37, 13, 61), (41, 13, 61), (43, 13, 61), (47, 13, 61), (2, 14, 61), (3, 14, 61), (4, 14, 61), (5, 14, 61), (6, 14, 61), (7, 14, 61), (8, 14, 61), (9, 14, 61), (10, 14, 61), (11, 14, 61), (12, 14, 61), (13, 14, 61), (14, 14, 61), (15, 14, 61), (16, 14, 61), (17, 14, 61), (18, 14, 61), (19, 14, 61), (20, 14, 61), (21, 14, 61), (22, 14, 61), (23, 14, 61), (24, 14, 61), (25, 14, 61), (26, 14, 61), (27, 14, 61), (28, 14, 61), (29, 14, 61), (30, 14, 61), (31, 14, 61), (32, 14, 61), (33, 14, 61), (34, 14, 61), (35, 14, 61), (36, 14, 61), (37, 14, 61), (38, 14, 61), (39, 14, 61), (40, 14, 61), (41, 14, 61), (42, 14, 61), (43, 14, 61), (44, 14, 61), (45, 14, 61), (46, 14, 61), (3, 15, 61), (5, 15, 61), (7, 15, 61), (9, 15, 61), (11, 15, 61), (13, 15, 61), (15, 15, 61), (17, 15, 61), (19, 15, 61), (21, 15, 61), (25, 15, 61), (27, 15, 61), (29, 15, 61), (31, 15, 61), (33, 15, 61), (35, 15, 61), (37, 15, 61), (39, 15, 61), (41, 15, 61), (43, 15, 61), (45, 15, 61), (2, 16, 61), (4, 16, 61), (7, 16, 61), (8, 16, 61), (11, 16, 61), (13, 16, 61), (14, 16, 61), (16, 16, 61), (17, 16, 61), (19, 16, 61), (22, 16, 61), (23, 16, 61), (26, 16, 61), (28, 16, 61), (29, 16, 61), (31, 16, 61), (32, 16, 61), (34, 16, 61), (37, 16, 61), (38, 16, 61), (41, 16, 61), (43, 16, 61), (44, 16, 61), (3, 17, 61), (5, 17, 61), (7, 17, 61), (9, 17, 61), (13, 17, 61), (15, 17, 61), (17, 17, 61), (19, 17, 61), (21, 17, 61), (23, 17, 61), (25, 17, 61), (27, 17, 61), (29, 17, 61), (31, 17, 61), (35, 17, 61), (37, 17, 61), (39, 17, 61), (41, 17, 61), (43, 17, 61), (2, 18, 61), (3, 18, 61), (4, 18, 61), (5, 18, 61), (6, 18, 61), (7, 18, 61), (8, 18, 61), (9, 18, 61), (10, 18, 61), (11, 18, 61), (12, 18, 61), (13, 18, 61), (14, 18, 61), (15, 18, 61), (16, 18, 61), (17, 18, 61), (18, 18, 61), (19, 18, 61), (20, 18, 61), (21, 18, 61), (22, 18, 61), (23, 18, 61), (24, 18, 61), (25, 18, 61), (26, 18, 61), (27, 18, 61), (28, 18, 61), (29, 18, 61), (30, 18, 61), (31, 18, 61), (32, 18, 61), (33, 18, 61), (34, 18, 61), (35, 18, 61), (36, 18, 61), (37, 18, 61), (38, 18, 61), (39, 18, 61), (40, 18, 61), (41, 18, 61), (42, 18, 61), (5, 19, 61), (11, 19, 61), (13, 19, 61), (17, 19, 61), (19, 19, 61), (23, 19, 61), (25, 19, 61), (29, 19, 61), (31, 19, 61), (37, 19, 61), (41, 19, 61), (2, 20, 61), (3, 20, 61), (4, 20, 61), (5, 20, 61), (6, 20, 61), (7, 20, 61), (8, 20, 61), (9, 20, 61), (10, 20, 61), (11, 20, 61), (12, 20, 61), (13, 20, 61), (14, 20, 61), (15, 20, 61), (16, 20, 61), (17, 20, 61), (18, 20, 61), (19, 20, 61), (20, 20, 61), (21, 20, 61), (22, 20, 61), (23, 20, 61), (24, 20, 61), (25, 20, 61), (26, 20, 61), (27, 20, 61), (28, 20, 61), (29, 20, 61), (30, 20, 61), (31, 20, 61), (32, 20, 61), (33, 20, 61), (34, 20, 61), (35, 20, 61), (36, 20, 61), (37, 20, 61), (38, 20, 61), (39, 20, 61), (40, 20, 61), (3, 21, 61), (7, 21, 61), (9, 21, 61), (11, 21, 61), (13, 21, 61), (17, 21, 61), (19, 21, 61), (21, 21, 61), (23, 21, 61), (27, 21, 61), (29, 21, 61), (31, 21, 61), (33, 21, 61), (37, 21, 61), (39, 21, 61), (2, 22, 61), (4, 22, 61), (5, 22, 61), (7, 22, 61), (8, 22, 61), (10, 22, 61), (11, 22, 61), (14, 22, 61), (16, 22, 61), (17, 22, 61), (19, 22, 61), (20, 22, 61), (22, 22, 61), (23, 22, 61), (25, 22, 61), (28, 22, 61), (29, 22, 61), (31, 22, 61), (32, 22, 61), (34, 22, 61), (35, 22, 61), (37, 22, 61), (38, 22, 61), (3, 23, 61), (5, 23, 61), (7, 23, 61), (9, 23, 61), (11, 23, 61), (13, 23, 61), (15, 23, 61), (17, 23, 61), (21, 23, 61), (23, 23, 61), (25, 23, 61), (27, 23, 61), (29, 23, 61), (31, 23, 61), (33, 23, 61), (35, 23, 61), (37, 23, 61), (2, 24, 61), (3, 24, 61), (4, 24, 61), (5, 24, 61), (6, 24, 61), (7, 24, 61), (8, 24, 61), (9, 24, 61), (10, 24, 61), (11, 24, 61), (12, 24, 61), (13, 24, 61), (14, 24, 61), (15, 24, 61), (16, 24, 61), (17, 24, 61), (18, 24, 61), (19, 24, 61), (20, 24, 61), (21, 24, 61), (22, 24, 61), (23, 24, 61), (24, 24, 61), (25, 24, 61), (26, 24, 61), (27, 24, 61), (28, 24, 61), (29, 24, 61), (30, 24, 61), (31, 24, 61), (32, 24, 61), (33, 24, 61), (34, 24, 61), (35, 24, 61), (36, 24, 61), (5, 25, 61), (7, 25, 61), (11, 25, 61), (13, 25, 61), (17, 25, 61), (19, 25, 61), (23, 25, 61), (25, 25, 61), (29, 25, 61), (31, 25, 61), (35, 25, 61), (2, 26, 61), (3, 26, 61), (4, 26, 61), (6, 26, 61), (8, 26, 61), (9, 26, 61), (11, 26, 61), (12, 26, 61), (13, 26, 61), (16, 26, 61), (17, 26, 61), (18, 26, 61), (19, 26, 61), (22, 26, 61), (23, 26, 61), (24, 26, 61), (26, 26, 61), (27, 26, 61), (29, 26, 61), (31, 26, 61), (32, 26, 61), (33, 26, 61), (34, 26, 61), (3, 27, 61), (5, 27, 61), (7, 27, 61), (9, 27, 61), (11, 27, 61), (13, 27, 61), (15, 27, 61), (19, 27, 61), (21, 27, 61), (23, 27, 61), (25, 27, 61), (27, 27, 61), (29, 27, 61), (31, 27, 61), (33, 27, 61), (2, 28, 61), (4, 28, 61), (5, 28, 61), (7, 28, 61), (8, 28, 61), (10, 28, 61), (13, 28, 61), (14, 28, 61), (16, 28, 61), (17, 28, 61), (19, 28, 61), (20, 28, 61), (23, 28, 61), (25, 28, 61), (26, 28, 61), (28, 28, 61), (29, 28, 61), (31, 28, 61), (32, 28, 61), (3, 29, 61), (5, 29, 61), (7, 29, 61), (9, 29, 61), (11, 29, 61), (13, 29, 61), (15, 29, 61), (17, 29, 61), (19, 29, 61), (21, 29, 61), (23, 29, 61), (25, 29, 61), (27, 29, 61), (29, 29, 61), (31, 29, 61), (2, 30, 61), (3, 30, 61), (4, 30, 61), (5, 30, 61), (6, 30, 61), (7, 30, 61), (8, 30, 61), (9, 30, 61), (10, 30, 61), (11, 30, 61), (12, 30, 61), (13, 30, 61), (14, 30, 61), (15, 30, 61), (16, 30, 61), (17, 30, 61), (18, 30, 61), (19, 30, 61), (20, 30, 61), (21, 30, 61), (22, 30, 61), (23, 30, 61), (24, 30, 61), (25, 30, 61), (26, 30, 61), (27, 30, 61), (28, 30, 61), (29, 30, 61), (30, 30, 61), (7, 31, 61), (11, 31, 61), (13, 31, 61), (17, 31, 61), (19, 31, 61), (23, 31, 61), (29, 31, 61), (2, 32, 61), (3, 32, 61), (4, 32, 61), (5, 32, 61), (6, 32, 61), (7, 32, 61), (8, 32, 61), (9, 32, 61), (10, 32, 61), (11, 32, 61), (12, 32, 61), (13, 32, 61), (14, 32, 61), (15, 32, 61), (16, 32, 61), (17, 32, 61), (18, 32, 61), (19, 32, 61), (20, 32, 61), (21, 32, 61), (22, 32, 61), (23, 32, 61), (24, 32, 61), (25, 32, 61), (26, 32, 61), (27, 32, 61), (28, 32, 61), (3, 33, 61), (5, 33, 61), (9, 33, 61), (11, 33, 61), (13, 33, 61), (15, 33, 61), (17, 33, 61), (19, 33, 61), (23, 33, 61), (25, 33, 61), (27, 33, 61), (2, 34, 61), (4, 34, 61), (5, 34, 61), (7, 34, 61), (8, 34, 61), (10, 34, 61), (11, 34, 61), (13, 34, 61), (14, 34, 61), (16, 34, 61), (17, 34, 61), (19, 34, 61), (20, 34, 61), (22, 34, 61), (23, 34, 61), (25, 34, 61), (26, 34, 61), (3, 35, 61), (5, 35, 61), (7, 35, 61), (9, 35, 61), (11, 35, 61), (15, 35, 61), (17, 35, 61), (19, 35, 61), (21, 35, 61), (23, 35, 61), (25, 35, 61), (2, 36, 61), (3, 36, 61), (4, 36, 61), (6, 36, 61), (7, 36, 61), (8, 36, 61), (9, 36, 61), (11, 36, 61), (12, 36, 61), (13, 36, 61), (14, 36, 61), (16, 36, 61), (17, 36, 61), (18, 36, 61), (19, 36, 61), (21, 36, 61), (22, 36, 61), (23, 36, 61), (24, 36, 61), (5, 37, 61), (7, 37, 61), (11, 37, 61), (13, 37, 61), (17, 37, 61), (19, 37, 61), (23, 37, 61), (2, 38, 61), (3, 38, 61), (4, 38, 61), (5, 38, 61), (6, 38, 61), (7, 38, 61), (8, 38, 61), (9, 38, 61), (10, 38, 61), (11, 38, 61), (12, 38, 61), (13, 38, 61), (14, 38, 61), (15, 38, 61), (16, 38, 61), (17, 38, 61), (18, 38, 61), (19, 38, 61), (20, 38, 61), (21, 38, 61), (22, 38, 61), (3, 39, 61), (5, 39, 61), (7, 39, 61), (9, 39, 61), (13, 39, 61), (15, 39, 61), (17, 39, 61), (19, 39, 61), (21, 39, 61), (2, 40, 61), (4, 40, 61), (5, 40, 61), (8, 40, 61), (10, 40, 61), (11, 40, 61), (13, 40, 61), (16, 40, 61), (17, 40, 61), (19, 40, 61), (20, 40, 61), (3, 41, 61), (7, 41, 61), (9, 41, 61), (11, 41, 61), (13, 41, 61), (17, 41, 61), (19, 41, 61), (2, 42, 61), (3, 42, 61), (4, 42, 61), (5, 42, 61), (6, 42, 61), (7, 42, 61), (8, 42, 61), (9, 42, 61), (10, 42, 61), (11, 42, 61), (12, 42, 61), (13, 42, 61), (14, 42, 61), (15, 42, 61), (16, 42, 61), (17, 42, 61), (18, 42, 61), (5, 43, 61), (7, 43, 61), (11, 43, 61), (13, 43, 61), (17, 43, 61), (2, 44, 61), (3, 44, 61), (4, 44, 61), (5, 44, 61), (6, 44, 61), (7, 44, 61), (8, 44, 61), (9, 44, 61), (10, 44, 61), (11, 44, 61), (12, 44, 61), (13, 44, 61), (14, 44, 61), (15, 44, 61), (16, 44, 61), (3, 45, 61), (5, 45, 61), (7, 45, 61), (9, 45, 61), (11, 45, 61), (13, 45, 61), (15, 45, 61), (2, 46, 61), (4, 46, 61), (7, 46, 61), (8, 46, 61), (11, 46, 61), (13, 46, 61), (14, 46, 61), (3, 47, 61), (5, 47, 61), (9, 47, 61), (11, 47, 61), (13, 47, 61), (2, 48, 61), (3, 48, 61), (4, 48, 61), (5, 48, 61), (6, 48, 61), (7, 48, 61), (8, 48, 61), (9, 48, 61), (10, 48, 61), (11, 48, 61), (12, 48, 61), (5, 49, 61), (7, 49, 61), (11, 49, 61), (2, 50, 61), (3, 50, 61), (4, 50, 61), (5, 50, 61), (6, 50, 61), (7, 50, 61), (8, 50, 61), (9, 50, 61), (10, 50, 61), (3, 51, 61), (7, 51, 61), (9, 51, 61), (2, 52, 61), (4, 52, 61), (5, 52, 61), (7, 52, 61), (8, 52, 61), (3, 53, 61), (5, 53, 61), (7, 53, 61), (2, 54, 61), (3, 54, 61), (4, 54, 61), (5, 54, 61), (6, 54, 61), (5, 55, 61), (2, 56, 61), (3, 56, 61), (4, 56, 61), (3, 57, 61), (2, 58, 61)]
ciphertext= )he#e|a#e|)<u|kird&|uf|c#\x)ug#axh\|ir|)hi&|<u#ld`|c#\x)ug#axh\|)ha)|<ill|&)ux|\u,#|kid|&i&)e#|f#uo|#eadirg|\u,#|file&:|ard|c#\x)ug#axh\|)ha)|<ill|&)ux|oaju#|gu/e#roer)&|f#uo|#eadirg|\u,#|file&@
plaintext = there are two kinds of cryptography in this world: cryptography that will stop your kid sister from reading your files, and cryptography that will stop major governments from reading your files.
key       = (3, 11, 61)

[(33, 19, 21), (33, 19, 23), (33, 19, 24), (33, 19, 26), (33, 19, 27), (33, 19, 29), (33, 19, 32), (33, 19, 33), (33, 19, 35), (33, 19, 36), (33, 19, 38), (33, 19, 39), (33, 19, 42), (33, 19, 44), (33, 19, 45), (33, 19, 47), (33, 19, 48), (33, 19, 50), (33, 19, 51), (33, 19, 53), (33, 19, 54), (33, 19, 56), (33, 19, 57), (33, 19, 59), (33, 19, 60), (33, 19, 62), (33, 19, 65), (33, 19, 66), (33, 19, 68), (33, 19, 69), (33, 19, 71), (33, 19, 72), (33, 19, 75), (33, 19, 77), (33, 19, 78), (33, 19, 80), (33, 19, 81), (33, 19, 83), (33, 19, 84), (33, 19, 86), (33, 19, 87), (33, 19, 89), (33, 19, 90), (33, 19, 92), (33, 19, 93), (33, 19, 95)]
ciphertext= there8are8t}o8kinds8of8cr3ptograph38in8this8}orld>8cr3ptograph38that8}ill8stop83o^r8kid8sister8from8reading83o^r8files*8and8cr3ptograph38that8}ill8stop8major8goyernments8from8reading83o^r8files/
plaintext = there are two kinds of cryptography in this world: cryptography that will stop your kid sister from reading your files, and cryptography that will stop major governments from reading your files.
key       = (33, 19, 80)

[(88, 1, 90), (88, 3, 90), (88, 5, 90), (88, 7, 90), (88, 9, 90), (88, 11, 90), (88, 15, 90), (88, 17, 90), (88, 19, 90), (88, 21, 90), (88, 23, 90), (88, 25, 90), (88, 27, 90), (88, 29, 90), (88, 31, 90), (88, 33, 90), (88, 37, 90), (88, 39, 90), (88, 41, 90), (88, 43, 90), (88, 45, 90), (88, 47, 90), (88, 49, 90), (88, 51, 90), (88, 53, 90), (88, 55, 90), (88, 59, 90), (88, 61, 90), (88, 63, 90), (88, 65, 90), (88, 67, 90), (88, 69, 90), (88, 71, 90), (88, 73, 90), (88, 75, 90), (88, 77, 90), (88, 81, 90), (88, 83, 90), (88, 85, 90), (88, 87, 90)]
ciphertext= DPSFS6aFS6DAI6MOJTE6IR6UF8HDIQFaHP86OJ6DPOE6AIFLT[6UF8HDIQFaHP86DPaD6AOLL6EDIH68ICF6MOT6EOEDSF6RFIK6FSaTOJQ68ICF6ROLSE_6aJT6UF8HDIQFaHP86DPaD6AOLL6EDIH6KaNIF6QIBSFJKSJDE6RFIK6FSaTOJQ68ICF6ROLSE]
plaintext = there are two kinds of cryptography in this world: cryptography that will stop your kid sister from reading your files, and cryptography that will stop major governments from reading your files.
key       = (88, 1, 90)

End of Decimation Cryptanalysis Testing
----------------------------------------

----------------------------------------
Start of Affine Basic Testing

Creating a affine cipher object using default constructor:
Affine Cipher:
y = 17x + 9 mod 26
x = 23(y - 9) mod 26

Testing Affine.valaid_key:
[3, 5, 0, 12]   --> False
(3, 5, 0)       --> False
(3, 5, '0', 13) --> False
(3, 5, 29, 14)  --> False
(13, 5, 0, 26)  --> False
(11, 5, 0, 26)  --> True
(14, 24, 6, 37) --> True

Testing set_key, get_key, get_base and __str__:
Setting Affine key to (11, 5, 0, 25)
	set_key success = True
	get_key = (11, 5, 0, 25)
	get_base = abcdefghijklmnopqrstuvwxy
Affine Cipher:
y = 11x + 5 mod 25
x = 16(y - 5) mod 25

Setting Affine key to (14, 124, 6, 37)
	set_key success = True
	get_key = (14, 0, 6, 37)
	get_base = ghijklmnopqrstuvwxyz !"#$%&'()*
Affine Cipher:
y = 14x + 0 mod 31
x = 20(y - 0) mod 31

Setting Affine key to (-5, 22, 0, 71)
	set_key success = True
	get_key = (66, 22, 0, 71)
	get_base = abcdefghijklmnopqrstuvwxyz !"#$%&'()*+,-./:;<=>?@[\]^_`{|}~0123456789AB
Affine Cipher:
y = 66x + 22 mod 71
x = 14(y - 22) mod 71

End of Affine Cipher basic Testing
----------------------------------------

----------------------------------------
Start of Affine Testing

--------------- Testing Encryption/Decryption:
Affine Cipher:
y = 5x + 8 mod 26
x = 21(y - 8) mod 26
plaintext =   Strike in progress
ciphertext=   Szpwgc wv fpampcuu
plaintext2=   Strike in progress

Affine Cipher:
y = 16x + 3 mod 29
x = 20(y - 3) mod 29
plaintext =   Is mission accomplished?
ciphertext=   Ibnvpbbpyindggyvlfpb"jw?
plaintext2=   Is mission accomplished?

Affine Cipher:
y = 10x + 19 mod 41
x = 37(y - 19) mod 41
plaintext =   Mission Failed!
ciphertext=   Mr))r* 'Ftrgsic
plaintext2=   Mission Failed!

Affine Cipher:
y = 11x + 17 mod 86
x = 47(y - 17) mod 86
plaintext =   Plan B ... initiated
ciphertext=   2&a`zKzhhhzQ`Q(Qa(/$
plaintext2=   Plan B ... initiated

End of Affine Cipher Testing
----------------------------------------

----------------------------------------
Start of Affine Cryptanalysis Testing

Testing cryptanalyze_keys:
base = [5, 2, 0, 26]
#keys = 1
keys[:10] = [(5, 2, 0, 26)]
keys[-1] = (5, 2, 0, 26)

base = [13, 14, 0, 26]
#keys = 0
keys[:10] = []

base = [8, -1, 0, 27]
#keys = 28
keys[:10] = [(8, 0, 0, 27), (8, 1, 0, 27), (8, 2, 0, 27), (8, 3, 0, 27), (8, 4, 0, 27), (8, 5, 0, 27), (8, 6, 0, 27), (8, 7, 0, 27), (8, 8, 0, 27), (8, 9, 0, 27)]
keys[-1] = (8, 27, 0, 27)

base = [1, -1, 3, 40]
#keys = 37
keys[:10] = [(1, 1, 3, 40), (1, 2, 3, 40), (1, 3, 3, 40), (1, 4, 3, 40), (1, 5, 3, 40), (1, 6, 3, 40), (1, 7, 3, 40), (1, 8, 3, 40), (1, 9, 3, 40), (1, 10, 3, 40)]
keys[-1] = (1, 37, 3, 40)

base = [-1, 6, 4, 45]
#keys = 40
keys[:10] = [(1, 6, 4, 45), (2, 6, 4, 45), (3, 6, 4, 45), (4, 6, 4, 45), (5, 6, 4, 45), (6, 6, 4, 45), (7, 6, 4, 45), (8, 6, 4, 45), (9, 6, 4, 45), (10, 6, 4, 45)]
keys[-1] = (40, 6, 4, 45)

base = [-1, 7, 5, 49]
#keys = 20
keys[:10] = [(1, 7, 5, 49), (3, 7, 5, 49), (5, 7, 5, 49), (7, 7, 5, 49), (9, 7, 5, 49), (13, 7, 5, 49), (15, 7, 5, 49), (17, 7, 5, 49), (19, 7, 5, 49), (21, 7, 5, 49)]
keys[-1] = (43, 7, 5, 49)

base = [-1, 0, 3, 16]
#keys = 11
keys[:10] = [(2, 0, 3, 16), (3, 0, 3, 16), (4, 0, 3, 16), (5, 0, 3, 16), (6, 0, 3, 16), (7, 0, 3, 16), (8, 0, 3, 16), (9, 0, 3, 16), (10, 0, 3, 16), (11, 0, 3, 16)]
keys[-1] = (12, 0, 3, 16)

base = [5, 11, -1, 29]
#keys = 23
keys[:10] = [(5, 11, 0, 29), (5, 11, 1, 29), (5, 11, 2, 29), (5, 11, 3, 29), (5, 11, 5, 29), (5, 11, 6, 29), (5, 11, 7, 29), (5, 11, 8, 29), (5, 11, 10, 29), (5, 11, 11, 29)]
keys[-1] = (5, 11, 27, 29)

base = [1, 0, -1, 28]
#keys = 0
keys[:10] = []

base = [19, 6, 55, -1]
#keys = 37
keys[:10] = [(19, 6, 55, 57), (19, 6, 55, 58), (19, 6, 55, 59), (19, 6, 55, 60), (19, 6, 55, 61), (19, 6, 55, 62), (19, 6, 55, 63), (19, 6, 55, 64), (19, 6, 55, 65), (19, 6, 55, 66)]
keys[-1] = (19, 6, 55, 95)

base = [18, 15, 54, -1]
#keys = 13
keys[:10] = [(18, 15, 54, 59), (18, 15, 54, 61), (18, 15, 54, 65), (18, 15, 54, 67), (18, 15, 54, 71), (18, 15, 54, 73), (18, 15, 54, 77), (18, 15, 54, 79), (18, 15, 54, 83), (18, 15, 54, 85)]
keys[-1] = (18, 15, 54, 95)

Testing cryptanalysis:
[(1, 18, 0, 26), (3, 18, 0, 26), (5, 18, 0, 26), (7, 18, 0, 26), (9, 18, 0, 26), (11, 18, 0, 26), (15, 18, 0, 26), (17, 18, 0, 26), (19, 18, 0, 26), (21, 18, 0, 26), (23, 18, 0, 26), (25, 18, 0, 26)]
ciphertext= yhpmec mf xpoupcyy
plaintext = strike in progress
key       = (9, 18, 0, 26)

[(11, 0, 0, 39), (11, 1, 0, 39), (11, 2, 0, 39), (11, 3, 0, 39), (11, 4, 0, 39), (11, 5, 0, 39), (11, 6, 0, 39), (11, 7, 0, 39), (11, 8, 0, 39), (11, 9, 0, 39), (11, 10, 0, 39), (11, 11, 0, 39), (11, 12, 0, 39), (11, 13, 0, 39), (11, 14, 0, 39), (11, 15, 0, 39), (11, 16, 0, 39), (11, 17, 0, 39), (11, 18, 0, 39), (11, 19, 0, 39), (11, 20, 0, 39), (11, 21, 0, 39), (11, 22, 0, 39), (11, 23, 0, 39), (11, 24, 0, 39), (11, 25, 0, 39), (11, 26, 0, 39), (11, 27, 0, 39), (11, 28, 0, 39), (11, 29, 0, 39), (11, 30, 0, 39), (11, 31, 0, 39), (11, 32, 0, 39), (11, 33, 0, 39), (11, 34, 0, 39), (11, 35, 0, 39), (11, 36, 0, 39), (11, 37, 0, 39), (11, 38, 0, 39), (11, 39, 0, 39)]
ciphertext= hs)o*jro$rn)c%)jhh
plaintext = strike in progress
key       = (11, 4, 0, 39)

[(21, 23, 0, 2), (21, 23, 0, 4), (21, 23, 0, 5), (21, 23, 0, 8), (21, 23, 0, 10), (21, 23, 0, 11), (21, 23, 0, 13), (21, 23, 0, 16), (21, 23, 0, 17), (21, 23, 0, 19), (21, 23, 0, 20), (21, 23, 0, 22), (21, 23, 0, 23), (21, 23, 0, 25), (21, 23, 0, 26), (21, 23, 0, 29), (21, 23, 0, 31), (21, 23, 0, 32), (21, 23, 0, 34), (21, 23, 0, 37), (21, 23, 0, 38), (21, 23, 0, 40), (21, 23, 0, 41), (21, 23, 0, 43), (21, 23, 0, 44), (21, 23, 0, 46), (21, 23, 0, 47), (21, 23, 0, 50), (21, 23, 0, 52), (21, 23, 0, 53), (21, 23, 0, 55), (21, 23, 0, 58), (21, 23, 0, 59), (21, 23, 0, 61), (21, 23, 0, 62), (21, 23, 0, 64), (21, 23, 0, 65), (21, 23, 0, 67), (21, 23, 0, 68), (21, 23, 0, 71), (21, 23, 0, 73), (21, 23, 0, 74), (21, 23, 0, 76), (21, 23, 0, 79), (21, 23, 0, 80), (21, 23, 0, 82), (21, 23, 0, 83), (21, 23, 0, 85), (21, 23, 0, 86), (21, 23, 0, 88), (21, 23, 0, 89), (21, 23, 0, 92), (21, 23, 0, 94), (21, 23, 0, 95)]
ciphertext= Tw'k'oxk'opevolgam%ovro"kjfpvbkxfwjogaopwg%oevk&m:o"kjfpvbkxfwjopwxpoeg&&o%pvfojv*kolgmo%g%p'korkvqok'xmgabojv*korg&'%,oxamo"kjfpvbkxfwjopwxpoeg&&o%pvfoqx!vkobvu'kaq'ap%orkvqok'xmgabojv*korg&'%.
plaintext = There are two kinds of cryptography in this world: cryptography that will stop your kid sister from reading your files, and cryptography that will stop major governments from reading your files.
key       = (21, 23, 0, 37)

[(8, 55, 0, 81), (8, 55, 2, 81), (8, 55, 4, 81), (8, 55, 6, 81), (8, 55, 8, 81), (8, 55, 10, 81), (8, 55, 12, 81), (8, 55, 14, 81), (8, 55, 16, 81), (8, 55, 18, 81), (8, 55, 20, 81), (8, 55, 22, 81), (8, 55, 24, 81), (8, 55, 26, 81), (8, 55, 28, 81), (8, 55, 30, 81), (8, 55, 32, 81), (8, 55, 34, 81), (8, 55, 36, 81), (8, 55, 38, 81), (8, 55, 40, 81), (8, 55, 42, 81), (8, 55, 44, 81), (8, 55, 46, 81), (8, 55, 48, 81), (8, 55, 50, 81), (8, 55, 52, 81), (8, 55, 54, 81), (8, 55, 56, 81), (8, 55, 58, 81), (8, 55, 60, 81), (8, 55, 62, 81), (8, 55, 64, 81), (8, 55, 66, 81), (8, 55, 68, 81), (8, 55, 70, 81), (8, 55, 72, 81), (8, 55, 74, 81), (8, 55, 76, 81), (8, 55, 78, 81)]
ciphertext= TsEtEmatEm)0Fm: 76!mFcm}tGd)FktadsGm 7m)s !m0Ft\62m}tGd)FktadsGm)sa)m0 \\m!)FdmGF;tm: 6m! !)EtmctF~mtEa6 7kmGF;tmc \E!#ma76m}tGd)FktadsGm)sa)m0 \\m!)Fdm~a(FtmkF]Et7~E7)!mctF~mtEa6 7kmGF;tmc \E!=
plaintext = There are two kinds of cryptography in this world: cryptography that will stop your kid sister from reading your files, and cryptography that will stop major governments from reading your files.
key       = (8, 55, 2, 81)

[(23, 34, 13, 91)]
ciphertext= |he2e(a2e(#uB(ki?dP(Bf(c27p#Bg2aph7(i?(#hiP(uB2ldV(c27p#Bg2aph7(#ha#(uill(P#Bp(7B^2(kid(PiP#e2(f2Bm(2eadi?g(7B^2(filePH(a?d(c27p#Bg2aph7(#ha#(uill(P#Bp(majB2(gBGe2?me?#P(f2Bm(2eadi?g(7B^2(fileP<
plaintext = There are two kinds of cryptography in this world: cryptography that will stop your kid sister from reading your files, and cryptography that will stop major governments from reading your files.
key       = (23, 34, 13, 91)

End of Affine Cryptanalysis Testing
----------------------------------------

