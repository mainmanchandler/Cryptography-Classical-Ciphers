----------------------------------------
Start of Matrix Library Default Testing

m = Matrix()
print(m) = 
m.get_matrix() = []
m.get_size() = (0, 0)
m.get_row(0) = Error(Matrix.get_row): index out of range
m.get_column(0) = Error(Matrix.get_column): index out of range
m.get_item(0,0) = Error(Matrix.get_item): index out of range
m.is_empty() = True
m.is_vector() = True
m.is_square() = True
m.is_identity() = False
m.to_list() = []
m.set_item(0,0,0) = Error(Matrix.set_item): index out of range
m.det() = Error(Matrix.det): det does not exist

End of Matrix Library Default Testing
----------------------------------------

----------------------------------------
Start of Matrix Library Default Testing

---------- Case 1: 2x2 matrix:
m = Matrix(2,2,5)
print(m) = 
[5, 5]
[5, 5]
m.get_matrix() = [[5, 5], [5, 5]]
m.get_size() = (2, 2)
m.get_row(0) = [5, 5]
m.get_column(0) = [[5], [5]]
m.get_item(0,0) = 5
m.is_empty() = False
m.is_vector() = False
m.is_square() = True
m.is_identity() = False
m.to_list() = [[5, 5], [5, 5]]
m.set_item(0,0,0) =  True
print(m) =
[0, 5]
[5, 5]
m.set_matrix([[1,2],[3,4]]) = True
print(m) =
[1, 2]
[3, 4]
m.det() = -2

---------- Case 2: 2x3 matrix:
m = Matrix(2,3,6)
print(m) = 
[6, 6, 6]
[6, 6, 6]
m.set_item(-1,-2,4) =  True
[6, 6, 6]
[6, 4, 6]
m.set_item(-1,-1,5) =  True
[6, 6, 6]
[6, 4, 5]
m.set_item(-1,-3,2) =  True
[6, 6, 6]
[2, 4, 5]
Error(Matrix.set_item): index out of range
m.set_item(-1,-4,1) =  False
[6, 6, 6]
[2, 4, 5]
m.get_matrix() = [[6, 6, 6], [2, 4, 5]]
m.get_size() = (2, 3)
m.get_row(0) = [6, 6, 6]
m.get_column(0) = [[6], [2]]
m.get_item(0,0) = 6
m.is_empty() = False
m.is_vector() = False
m.is_square() = False
m.is_identity() = False
m.to_list() = [[6, 6, 6], [2, 4, 5]]
print(m) =
[6, 6, 6]
[2, 4, 5]
Error(Matrix.det): det does not exist
m.det() = 0

---------- matrix.det():
A = [[14, 6], [7, 4]]
det = 14

A = [10]
Error(Matrix.det): unsupported matrix size
det = 0

A = [[1, 1, 1], [2, 2, 2], [3, 3, 3]]
Error(Matrix.det): unsupported matrix size
det = 0

End of Matrix Library Basic Testing
----------------------------------------

----------------------------------------
Start of Matrix Library Static methods Testing

---------- Matrix.to_matrix(m):
[]
[[1], [2]]
[[1, 2], [3, 4]]
[]
[10]
[10, 20, 30]
[[2, 3, 4], [4, 5, 6], [7, 8, 9]]
[[1, 2, 3], [4, 5, 6]]

---------- Matrix.valid_vector():
10                --> False
(2, 3, 4)         --> False
[[]]              --> False
[[1], [2]]        --> False
[[1, 2], [3, 4]]  --> False
[]                --> True
[10]              --> True
[10, 20, 30]      --> True

---------- Matrix.valid_matrix():
10                --> False
(2, 3, 4)         --> False
[[2, 3], [4]]     --> False
[[2, 3, 4], [4, 5, 6], [7, [8], 9]] --> False
[[]]              --> True
[[1], [2]]        --> True
[[1, 2], [3, 4]]  --> True
[]                --> True
[10]              --> True
[10, 20, 30]      --> True
[[2, 3, 4], [4, 5, 6], [7, 8, 9]] --> True
[[1, 2, 3], [4, 5, 6]] --> True

---------- Matrix.I():
Matrix.I(0) = 
Error(Matrix.get_I): invalid size
[]

Matrix.I(1) = 
[1]

Matrix.I(2) = 
[1, 0]
[0, 1]

Matrix.I(3) = 
[1, 0, 0]
[0, 1, 0]
[0, 0, 1]

Matrix.I(4) = 
[1, 0, 0, 0]
[0, 1, 0, 0]
[0, 0, 1, 0]
[0, 0, 0, 1]

End of Matrix Library Static methods Testing
----------------------------------------

----------------------------------------
Start of Matrix Library operations Testing

---------- Scalar multiplication:
c = 4
matrix = (1, 2)
Error(Matrix.scalar_mul): invalid input
result = 
[]

c = 4
matrix = []
Error(Matrix.scalar_mul): invalid input
result = 
[]

c = 6
matrix = [1, 2, 3, 4]
result = 
[6, 12, 18, 24]

c = -1
matrix = [[10, 20], [30, 40]]
result = 
[-10, -20]
[-30, -40]

c = 13
matrix = [[15, 16, 17], [18, 19, 20]]
result = 
[195, 208, 221]
[234, 247, 260]

---------- Cross multiplication:
A = [[1, 2], [3, 4]]
B = [[10, 20], [30, 40]]
result = 
[70, 100]
[150, 220]

A = [[1, 2, 3], [5, 6, 7]]
B = [[10, 20], [30, 40], [50, 60]]
result = 
[220, 280]
[580, 760]

A = [5]
B = [10]
result = 
[50]

A = [0, 1, 2]
B = [[0], [1], [2]]
result = 
[5]

A = [[0], 1]
Error(Matrix.set_matrix): invalid input
B = [1, 0]
Error(Matrix.mul): size mismatch
result = 
[]

A = [[1, 2, 3], [5, 6, 7]]
B = [[10, 20], [30, 40], [50, 60]]
result = 
[220, 280]
[580, 760]

A = [[1, 2, 3], [5, 6, 7]]
B = [[10, 20], [30, 40]]
Error(Matrix.mul): size mismatch
result = 
[]

---------- Matrix.mod:
Matrix.mod([[15, 2], [3, 4]],2) = 
result = 
[1, 0]
[1, 0]

Matrix.mod([1, 2, 3, 4],2) = 
result = 
[1, 0, 1, 0]

Matrix.mod([[3], [5]],3) = 
result = 
[0]
[2]

Matrix.mod([[3], [5]],0) = 
Error(Matrix.mod): invalid input
result = 
[]

---------- Matrix.inverse_mod:
Matrix.inverse_mod([[1, 4], [8, 11]],26) = 
result = 
[23, 20]
[14, 21]
Verification successful

Matrix.inverse_mod([[4, 3], [1, 1]],5) = 
result = 
[1, 2]
[4, 4]
Verification successful

Matrix.inverse_mod([[5, 14], [14, 3]],26) = 
result = 
[3, 12]
[12, 5]
Verification successful

Matrix.inverse_mod([[1, 4], [8, 10]],26) = 
result = 
[]

Matrix.inverse_mod([1, 4, 8, 10],15) = 
result = 
[]

Matrix.inverse_mod([[4, 3], [1, 1]],-5) = 
result = 
[]

Matrix.inverse_mod([[1, 2, 3], [4, 5, 6], [7, 8, 9]],7) = 
result = 
[]

End of Matrix Library operations Testing
----------------------------------------

----------------------------------------
Start of Hill Basic Testing

Creating a hill cipher object using default constructor:
Hill Cipher:
key = food, m = 26, pad = q

Testing Hill.encode and decode:
food --> [[5, 14], [14, 3]] --> food
pswd --> [[15, 18], [22, 3]] --> pswd
rod --> [[17, 14], [3, 17]] --> rodr
an --> [[0, 13], [0, 13]] --> anan
b --> [[1, 1], [1, 1]] --> bbbb
smart --> [[18, 12], [0, 17]] --> smar
3Cents --> [[4, 13], [19, 18]] --> ents

Testing Hill.valaid_key:
10 --> False
b --> False
pswd --> False
rod --> False
an --> False
smart --> False
food --> True
3Cents --> True
dog --> True
fishing --> True

Testing set_key, get_key, get_base and __str__:
Setting Hill key to ('Horse', 0, 26)
	Success = False
	get_key = ('food', 0, 26)
	get_base = abcdefghijklmnopqrstuvwxyz
	get_key_matrix = [[5, 14], [14, 3]]
Hill Cipher:
key = food, m = 26, pad = q

Setting Hill key to ('seal', 3, 39)
	Success = True
	get_key = ('seal', 3, 39)
	get_base = defghijklmnopqrstuvwxyz !"#$%&'()*+,
	get_key_matrix = [[15, 1], [8, 15]]
Hill Cipher:
key = seal, m = 36, pad = q

Setting Hill key to ('whale', 4, 41)
	Success = True
	get_key = ('whale', 4, 41)
	get_base = efghijklmnopqrstuvwxyz !"#$%&'()*+,-.
	get_key_matrix = [[18, 3], [7, 0]]
Hill Cipher:
key = whale, m = 37, pad = q

Setting Hill key to ('DUCKS', 22, 92)
	Success = True
	get_key = ('DUCKS', 22, 92)
	get_base = wxyz !"#$%&'()*+,-./:;<=>?@[\]^_`{|}~0123456789ABCDEFGHIJKLMNOPQRSTUVW
	get_key_matrix = [[50, 67], [49, 57]]
Hill Cipher:
key = DUCKS, m = 70, pad = q

Setting Hill key to ('69934', 13, 87)
	Success = True
	get_key = ('69934', 13, 87)
	get_base = nopqrstuvwxyz !"#$%&'()*+,-./:;<=>?@[\]^_`{|}~0123456789ABCDEFGHIJKLMNOPQR
	get_key_matrix = [[52, 55], [55, 49]]
Hill Cipher:
key = 69934, m = 74, pad = q

End of Hill Cipher basic Testing
----------------------------------------

----------------------------------------
Start of Hill cipher Testing

Hill Cipher:
key = pear, m = 26, pad = x
plaintext =  lunch
ciphertext = lcvipb
plaintext2 = lunch

Hill Cipher:
key = apple, m = 26, pad = q
plaintext =  brunch
ciphertext = vunbbd
plaintext2 = brunch

Hill Cipher:
key = fig, m = 27, pad = q
plaintext =  breakfast
ciphertext = gkuyjejjhf
plaintext2 = breakfast

Hill Cipher:
key = food, m = 26, pad = q
plaintext =  dinner
ciphertext = xonnyd
plaintext2 = dinner

Hill Cipher:
key = apricot, m = 37, pad = q
plaintext =  lunch bag
ciphertext = $h%c'nba,
plaintext2 = lunch bag

Hill Cipher:
key = CHERRY, m = 71, pad = Q
plaintext =  EMPTY WATER BOTTLE?
ciphertext = "w.{YFFC|V4{~2FP!GP
plaintext2 = EMPTY WATER BOTTLE?

Hill Cipher:
key = pr unes, m = 81, pad = ?
plaintext =  Full plates..of SALAD
ciphertext = ;xzo:>&a=eOFHAfASEAtK+
plaintext2 = Full plates..of SALAD

End of Hill cipher Testing
----------------------------------------

----------------------------------------
Start of LFSR Testing

LFSR(0101,1011,8) = 11011011
LFSR(0011,1000,18) = 000100110101111000
LFSR(01011,10000,32) = 00001010011011100001010011011100
LFSR(0100,1200,9) = Error(PRNG.LFSR): invalid input
LFSR(01100,1100,8) = Error(PRNG.LFSR): invalid input
LFSR(0102,1011,11) = Error(PRNG.LFSR): invalid input
LFSR(01010,10000,-2) = Error(PRNG.LFSR): invalid input

End of LFSR Testing
----------------------------------------

----------------------------------------
Start of BBS Testing

PRNG.BBS(383,503,8) = 01110011
PRNG.BBS(11,19,4) = 1110
PRNG.BBS(27691,11,16) = 1111110111000011
PRNG.BBS(383,503,0) = Error(PRNG.BBS): invalid bits
PRNG.BBS(383,503,1) = Error(PRNG.BBS): invalid q
PRNG.BBS(384,503,1) = Error(PRNG.BBS): invalid p

End of LFSR Testing
----------------------------------------

